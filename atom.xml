<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><title type="text">Pkgcraft</title><subtitle type="html">Pkgcraft</subtitle><updated>2022-02-01T18:48:19+00:00</updated><id>https://pkgcraft.github.io/</id><link rel="alternate" type="text/html" href="https://pkgcraft.github.io/"/><link rel="self" type="application/atom+xml" href="https://pkgcraft.github.io/atom.xml"/><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/)</rights><generator uri="https://gohugo.io/" version="0.91.2">Hugo</generator><entry><title type="text">Extending bash</title><link rel="alternate" type="text/html" href="https://pkgcraft.github.io/posts/extending-bash/"/><id>https://pkgcraft.github.io/posts/extending-bash/</id><updated>2022-02-01T18:48:17+00:00</updated><published>2022-01-25T01:29:42-07:00</published><author><uri>https://pkgcraft.github.io/</uri></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/)</rights><summary type="html">Basing a package manager and related specification on bash is a mistake. Familiarity and hackability are great in the short-term, but as the novelty wears off it becomes clear that maintainability, efficiency, and other attributes hard to wrest from bash&amp;rsquo;s rigid design all suffer.</summary><content type="html">&lt;p>Basing a package manager and related specification on bash is a mistake.
Familiarity and hackability are great in the short-term, but as the novelty
wears off it becomes clear that maintainability, efficiency, and other
attributes hard to wrest from bash&amp;rsquo;s rigid design all suffer. As long as
compatibility remains important for pkgcraft that decision can&amp;rsquo;t be altered;
however, that doesn&amp;rsquo;t mean nothing can be done to improve the situation.&lt;/p>
&lt;p>One option is to go pkgcore&amp;rsquo;s route, using IPC with a bash daemon. This enables
sharing bash processes between separate tasks rather than relying on a
simplistic exec-per-use scheme. Among other effects, this makes pkgcore&amp;rsquo;s
metadata generation approximately five times faster than its main competitor.
While providing many marginal improvements, this daemonized approach still
doesn&amp;rsquo;t escape the restrictive boundaries of regular shell usage. Among other
downsides, pkgcore requires subshells (meaning additional processes) to avoid
environment leaks during metadata generation and uses hacky RPC signaling
across pipes since it&amp;rsquo;s hard to work with anything else natively in bash.&lt;/p>
&lt;p>Pkgcraft aims to move beyond daemon functionality and achieve better lower
level integration. The dream of replacing bash with something threadable and
modern is enticing, but it&amp;rsquo;s fairly impossible in the short-term and thus
disregarded. Instead, pkgcraft dives directly into the pit of insanity; it
forks bash&lt;sup id="fnref:1">&lt;a href="https://pkgcraft.github.io/posts/extending-bash/#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> in an effort to achieve its goals.&lt;/p>
&lt;h3 id="parallelism-problems">Parallelism problems&lt;/h3>
&lt;p>Since pkgcraft goes to the extent of forking bash, it also takes on the various
deficiencies that hinder its use as a library. For a start, bash is not
thread-safe or reentrant at all. The current design uses an extensive amount of
global mutables to track both its parser and shell state. Bash uses bison which
supports generating reentrant parsers, but the shell itself requires extensive
rework for that to be feasible on a global scale.&lt;/p>
&lt;p>With that in mind, in order to support parallel usage a process pool or similar
design must be used. Currently this isn&amp;rsquo;t something that can easily be dropped
into place like python&amp;rsquo;s multiprocessing pool support. Parallelism in rust
centers around threading since its memory safety through enforced lifetimes
highlights threaded execution that&amp;rsquo;s guaranteed data-race free. This means that
most data parallelism crates similar to rayon only support threaded operation,
disregarding multi-process support entirely. At some point, pkgcraft will have
to address this and probably create its own pool or parallelized iterator
support that reuses processes.&lt;/p>
&lt;h3 id="error-handling">Error handling&lt;/h3>
&lt;p>Beyond parallelism issues, bash leverages longjmp() and frame unwinding for its
error handling. This is understandable due to its age, chosen language, and
minimal dependencies, but it doesn&amp;rsquo;t lend itself well to interoperability with
rust. For pkgcraft, bash is wrapped where its C code is called from the rust
library and then it can call back into rust support exported to C. The issue
with that is unwinding across rust-based frames from C is undefined behavior.
Hopefully at some point the &amp;ldquo;C-unwind&amp;rdquo; ABI&lt;sup id="fnref:2">&lt;a href="https://pkgcraft.github.io/posts/extending-bash/#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> and other related FFI work in
rust makes it into stable.&lt;/p>
&lt;p>With respect to longjmp() usage, in order to avoid null jump buffers the forked
version of bash tries to establish jump targets on the main entry points used
by the rust library. This isn&amp;rsquo;t necessary for standard bash because its top
level jump points are all in main() which isn&amp;rsquo;t used when built as a library.
Without this, most error handling segfaults when using &lt;code>set -e&lt;/code> because bash
tries to jump to an empty jump buffer.&lt;/p>
&lt;p>To cap off its unfriendly error handling, bash generally dumps all its error
messages to stderr. Clearly this isn&amp;rsquo;t wanted when used as a library,
especially when parallelized. To avoid this, the rust library passes in
callbacks for error and warning handling that bash calls, passing the raw
messages back to rust which are then converted into native rust errors or
logged.&lt;/p>
&lt;p>The remaining issue is that unless something like &lt;code>set -e&lt;/code> is being used on the
bash side, most errors do not cause immediate returns, exits, or any trigger
that could be used on the rust side to return a corresponding error result. To
work around this, the most recent bash error is stored on the rust side in a
thread-local variable that can be accessed after relevant calls in order to
determine their error status. This allows functionality such as returning error
results on failed &lt;code>source&lt;/code> calls while retaining the bash error message without
having to use &lt;code>set -e&lt;/code>, subshells, and redirection in order to achieve a
similar effect in native bash.&lt;/p>
&lt;h3 id="leveraging-builtins">Leveraging builtins&lt;/h3>
&lt;p>In terms of extensibility, bash provides support for writing builtins that can
be called like any other command. For example, &lt;code>set&lt;/code>, &lt;code>local&lt;/code>, &lt;code>echo&lt;/code>, and many
more commands provided by bash are builtins. Pkgcraft intends to use builtins
for all the commands that would either be exposed as functions or other public
callables. All other internal functionality will be implemented as methods
on the shell instance wrapping the bash library.&lt;/p>
&lt;p>The difficulty comes with sharing state across the FFI border since the
builtins are written in rust, but are called from C in bash. Therefore it&amp;rsquo;s not
easy to write them in a fashion that allows reuse and inter-builtin calls while
also passing some form of mutable context parameter. Once again, pkgcraft uses
a mutable, thread-local instance that builtins are able to import and use
within closures to access and modify build data as required. While somewhat
ugly, this does allow avoiding the even uglier bash variable hacks used by
pkgcore.&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>Pkgcraft&amp;rsquo;s bash fork is available at &lt;a href="https://github.com/pkgcraft/bash">https://github.com/pkgcraft/bash&lt;/a>.&amp;#160;&lt;a href="https://pkgcraft.github.io/posts/extending-bash/#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>&lt;a href="https://rust-lang.github.io/rfcs/2945-c-unwind-abi.html">https://rust-lang.github.io/rfcs/2945-c-unwind-abi.html&lt;/a>&amp;#160;&lt;a href="https://pkgcraft.github.io/posts/extending-bash/#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></content><category scheme="https://pkgcraft.github.io/tags/bash/" term="bash" label="bash"/></entry><entry><title type="text">The Timesink Chronicles</title><link rel="alternate" type="text/html" href="https://pkgcraft.github.io/posts/timesink-chronicles/"/><id>https://pkgcraft.github.io/posts/timesink-chronicles/</id><updated>2022-02-01T18:48:17+00:00</updated><published>2022-01-18T16:01:26-07:00</published><author><uri>https://pkgcraft.github.io/</uri></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/)</rights><summary type="html">Before beginning these grand timesink chronicles, allow me to review my historical use of Gentoo that helps explain this project&amp;rsquo;s existence. Note that this is pertains only to my experience and opinions.</summary><content type="html">&lt;p>Before beginning these grand timesink chronicles, allow me to review my
historical use of Gentoo that helps explain this project&amp;rsquo;s existence. Note that
this is pertains only to my experience and opinions.&lt;/p>
&lt;h5 id="2005----getting-sucked-in">2005 &amp;ndash; Getting sucked in&lt;/h5>
&lt;p>I first installed Gentoo around 2005, near the probable peak of outward
interest in the project. At this point no EAPIs existed, portage was the only
choice, and the project felt exciting probably due to the level of interest at
the time. From an outsider&amp;rsquo;s perspective, portage was doing an adequate job
since core counts were low for consumer machines. Therefore, parallelization
wasn&amp;rsquo;t overly important and improving the package tree was generally a higher
priority.&lt;/p>
&lt;p>In retrospect, the project should have capitalized more off the interest wave
to explore other ideas before, in effect, chaining itself to bash for life.
While I understand the upsides for selecting bash as a base, the downsides are
quite large from a developer&amp;rsquo;s perspective as bash is highly focused on two
things, running scripts and interactive shell usage. Its underlying structure
leaves a lot to be desired when trying to force it outside those bounds.&lt;/p>
&lt;h5 id="2010----new-package-managers-on-the-block">2010 &amp;ndash; New package managers on the block&lt;/h5>
&lt;p>Fast forward about 5 years to 2010 when EAPI 3 came out and two new package
managers (pkgcore and paludis) joined portage, evolving as part of the
specification process and proving its existence in aiding new development.
Having tried both, I was impressed by the speed of pkgcore in relation to my
experience with portage, both being mainly written in python. The main reasons
for this runtime difference come from pkgcore&amp;rsquo;s more streamlined restriction
framework, overall cleaner design, and ebuild daemon functionality that
avoided re-execing bash as much as possible. Sadly enough, as more features
made it into new EAPIs, pkgcore slowly fell behind mostly due to getting
bus-factored into near stasis.&lt;/p>
&lt;p>As could be discovered when trying out the alternative package managers,
portage was starting to lag behind in a number of areas that it still suffers
from including overall design and maintainability. While a number of features
and performance improvements did find their way from pkgcore to portage around
this time, in my opinion, Gentoo as a project should have thrown more support
behind moving to or subsuming pkgcore because it would quickly become a
nontrivial task in later years.&lt;/p>
&lt;h5 id="2015----reviving-a-dying-project">2015 &amp;ndash; Reviving a dying project&lt;/h5>
&lt;p>2015 was about the time I started getting involved in pkgcore-related
development. For my part, most of my work on pkgcore and its related tools was
due to curiosity, interest, and a hesitancy to let the project entirely die.
Over the next few years I would drag pkgcore along, keeping it barely alive,
culminating in rewriting pkgcheck (the pkgcore-based ebuild linter) nearly from
scratch in an effort to parallelize it as much as its python-based nature
allowed.&lt;/p>
&lt;p>During this time, it became apparent to me that Gentoo as a development
community often felt directionless and highly change averse. Democratizing
leadership while keeping the foundation separate lead to weak, overarching
vision and therefore a rudderless appearance for the project. Personally I
think the council should actively define priorities for the project and even
use funding where appropriate to aid in that effort rather than its mainly
reactionary and ratification style meetings.&lt;/p>
&lt;h5 id="2020-onwards----accepting-fate">2020 onwards &amp;ndash; Accepting fate&lt;/h5>
&lt;p>By 2020, it had become clear to me that pkgcore and its related tools were
evolutionary dead ends. I felt enough work had been done to prove their worth
and underlying design was better than portage in a number of ways, but that
wasn&amp;rsquo;t able to grow interest to a level where moving on from portage was
feasible. In order to have had a better future, more focus should have been
placed on merging pkgcore&amp;rsquo;s design with portage during the 2010 era when it was
potentially feasible to do, by 2020 it was all but impossible.&lt;/p>
&lt;p>With that in mind, I passed on maintenance to those with a vested interest in
the project mainly due to Gentoo beginning to seriously use pkgcheck for CI
against the main tree after the parallelization work was merged. I imagine the
project will continue on life-support style maintenance as long as its
alternative focuses on being an interactive commit tool, performing shockingly
terrible at linting runs on any significant scale.&lt;/p>
&lt;p>Regarding my decision to drop pkgcore, in essence I never agreed with some of
the underlying design and didn&amp;rsquo;t want to nearly rewrite it as I had been forced
to for pkgcheck. For example, continuing in portage&amp;rsquo;s footsteps using an
interpreted language like python for the core package manager felt like a poor
long-term choice. At the time the fork occurred, it probably made sense but
doesn&amp;rsquo;t anymore. In any case, if I was going to start over it would be
drastically different than pkgcore from the outset.&lt;/p>
&lt;h5 id="enter-pkgcraft">Enter&amp;hellip; pkgcraft&lt;/h5>
&lt;p>Having kicked around the idea of rewriting pkgcore in rust since early 2017, it
slowly became a reality as the ecosystem grew enough where third party
libraries existed to support the intended design. Whether it will surpass
pkgcore&amp;rsquo;s efforts or fade away as an ephemeral dream remains to be seen, but
hopefully these chronicles entertain, inform, or inspire others to support this
timesink and strive towards their own.&lt;/p></content><category scheme="https://pkgcraft.github.io/tags/gentoo/" term="Gentoo" label="Gentoo"/></entry></feed>